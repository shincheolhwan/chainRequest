const constants = require('../utils/constants');
const abiCode = require("../code/abiCode");
const byteCode = require("../code/byteCode");
const utils = require("../utils/utils");
const {ethers} = require("ethers");


async function deployContract(name, arguments = []) {
    // const contract = new constants.WEB3_CLIENT.eth.Contract(abiCode[name]);
    const contract = new constants.WEB3_CLIENT.eth.Contract([
        {
            "inputs": [
                {
                    "internalType": "bytes32[]",
                    "name": "proposalNames",
                    "type": "bytes32[]"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "chairperson",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }
            ],
            "name": "delegate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "voter",
                    "type": "address"
                }
            ],
            "name": "giveRightToVote",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "proposals",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "name",
                    "type": "bytes32"
                },
                {
                    "internalType": "uint256",
                    "name": "voteCount",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "proposal",
                    "type": "uint256"
                }
            ],
            "name": "vote",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "voters",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "weight",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "voted",
                    "type": "bool"
                },
                {
                    "internalType": "address",
                    "name": "delegate",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "vote",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "winnerName",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "winnerName_",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "winningProposal",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "winningProposal_",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ]);
    const options = {
        // data: '0x' + byteCode[name].object,
        data: '0x' + '60806040523480156200001157600080fd5b506040516200153238038062001532833981810160405281019062000037919062000243565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200017657600260405180604001604052808484815181106200010f576200010e620003b3565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200016d9062000336565b915050620000e2565b505062000450565b6000620001956200018f84620002bd565b62000294565b90508083825260208201905082856020860282011115620001bb57620001ba62000416565b5b60005b85811015620001ef5781620001d488826200022c565b845260208401935060208301925050600181019050620001be565b5050509392505050565b600082601f83011262000211576200021062000411565b5b8151620002238482602086016200017e565b91505092915050565b6000815190506200023d8162000436565b92915050565b6000602082840312156200025c576200025b62000420565b5b600082015167ffffffffffffffff8111156200027d576200027c6200041b565b5b6200028b84828501620001f9565b91505092915050565b6000620002a0620002b3565b9050620002ae828262000300565b919050565b6000604051905090565b600067ffffffffffffffff821115620002db57620002da620003e2565b5b602082029050602081019050919050565b6000819050919050565b6000819050919050565b6200030b8262000425565b810181811067ffffffffffffffff821117156200032d576200032c620003e2565b5b80604052505050565b60006200034382620002f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000379576200037862000384565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200044181620002ec565b81146200044d57600080fd5b50565b6110d280620004606000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd146101145780639e7b8d6114610132578063a3ec138d1461014e578063e2ba53f01461018157610088565b80630121b93f1461008d578063013cf08b146100a95780632e4176cf146100da5780635c19a95c146100f8575b600080fd5b6100a760048036038101906100a29190610a5b565b61019f565b005b6100c360048036038101906100be9190610a5b565b6102e6565b6040516100d1929190610c12565b60405180910390f35b6100e261031a565b6040516100ef9190610bdc565b60405180910390f35b610112600480360381019061010d9190610a2e565b61033e565b005b61011c610734565b6040516101299190610d3b565b60405180910390f35b61014c60048036038101906101479190610a2e565b6107bc565b005b61016860048036038101906101639190610a2e565b610973565b6040516101789493929190610d56565b60405180910390f35b6101896109d0565b6040516101969190610bf7565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561022a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022190610c3b565b60405180910390fd5b8060010160009054906101000a900460ff161561027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027390610c7b565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508181600201819055508060000154600283815481106102bb576102ba610ecc565b5b906000526020600020906002020160010160008282546102db9190610dac565b925050819055505050565b600281815481106102f657600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090610c5b565b60405180910390fd5b8060010160009054906101000a900460ff161561041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041290610c9b565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561048a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048190610d1b565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105fa57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610cdb565b60405180910390fd5b61048b565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561064f57600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff161561070f57816000015460028260020154815481106106e3576106e2610ecc565b5b906000526020600020906002020160010160008282546107039190610dac565b9250508190555061072f565b81600001548160000160008282546107279190610dac565b925050819055505b505050565b6000806000905060005b6002805490508110156107b75781600282815481106107605761075f610ecc565b5b90600052602060002090600202016001015411156107a4576002818154811061078c5761078b610ecc565b5b90600052602060002090600202016001015491508092505b80806107af90610e54565b91505061073e565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190610cbb565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190610cfb565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461092957600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b600060026109dc610734565b815481106109ed576109ec610ecc565b5b906000526020600020906002020160000154905090565b600081359050610a138161106e565b92915050565b600081359050610a2881611085565b92915050565b600060208284031215610a4457610a43610efb565b5b6000610a5284828501610a04565b91505092915050565b600060208284031215610a7157610a70610efb565b5b6000610a7f84828501610a19565b91505092915050565b610a9181610e02565b82525050565b610aa081610e14565b82525050565b610aaf81610e20565b82525050565b6000610ac2601483610d9b565b9150610acd82610f00565b602082019050919050565b6000610ae5601983610d9b565b9150610af082610f29565b602082019050919050565b6000610b08600e83610d9b565b9150610b1382610f52565b602082019050919050565b6000610b2b601283610d9b565b9150610b3682610f7b565b602082019050919050565b6000610b4e602883610d9b565b9150610b5982610fa4565b604082019050919050565b6000610b71601983610d9b565b9150610b7c82610ff3565b602082019050919050565b6000610b94601883610d9b565b9150610b9f8261101c565b602082019050919050565b6000610bb7601e83610d9b565b9150610bc282611045565b602082019050919050565b610bd681610e4a565b82525050565b6000602082019050610bf16000830184610a88565b92915050565b6000602082019050610c0c6000830184610aa6565b92915050565b6000604082019050610c276000830185610aa6565b610c346020830184610bcd565b9392505050565b60006020820190508181036000830152610c5481610ab5565b9050919050565b60006020820190508181036000830152610c7481610ad8565b9050919050565b60006020820190508181036000830152610c9481610afb565b9050919050565b60006020820190508181036000830152610cb481610b1e565b9050919050565b60006020820190508181036000830152610cd481610b41565b9050919050565b60006020820190508181036000830152610cf481610b64565b9050919050565b60006020820190508181036000830152610d1481610b87565b9050919050565b60006020820190508181036000830152610d3481610baa565b9050919050565b6000602082019050610d506000830184610bcd565b92915050565b6000608082019050610d6b6000830187610bcd565b610d786020830186610a97565b610d856040830185610a88565b610d926060830184610bcd565b95945050505050565b600082825260208201905092915050565b6000610db782610e4a565b9150610dc283610e4a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df757610df6610e9d565b5b828201905092915050565b6000610e0d82610e2a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e5f82610e4a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e9257610e91610e9d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b7f596f752068617665206e6f20726967687420746f20766f746500000000000000600082015250565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b61107781610e02565b811461108257600080fd5b50565b61108e81610e4a565b811461109957600080fd5b5056fea26469706673582212207855de2647918b17504b1c757150742bd2456765053cb8212af9b6c941e60a1a64736f6c63430008070033',
        arguments: arguments,
    };
    
    
    const web3Data = contract.deploy(options).encodeABI();
    
    
    const transaction = await constants.WEB3_CLIENT.eth.accounts.signTransaction({
        nonce: await utils.getNonce(constants.MICRO_CHAIN_ID, constants.USER.ADDRESS),
        chainId: constants.MICRO_CHAIN_ID,
        to: null,
        data: web3Data,
        value: null,
        gas: await utils.estimateGas(constants.MICRO_CHAIN_ID, constants.USER.ADDRESS, null, await utils.getGasPrice(constants.MICRO_CHAIN_ID), null, web3Data),
        gasPrice: await utils.getGasPrice(constants.MICRO_CHAIN_ID),
    }, constants.USER.PRIVATE_KEY)
    
    console.log(transaction.rawTransaction)
    
    // const data = await utils.sendTransactionForContractUpload(constants.MICRO_CHAIN_ID, transaction.rawTransaction);
    // console.log(data)
}

module.exports = deployContract;
